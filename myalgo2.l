00000000 ; outline of bubble sort program
00000000 00100000 ldc 0x1000  
00000001 0000000b a2sp  
00000002 ffffff0a adj -1  
00000003 00000a00 ldc 10  
00000004 00000003 stl 0  
00000005 00004100 ldc array 
00000006 0000010d call sort 
00000007 00000012 HALT  
00000008 ; 
00000008 ; Areg= return address 
00000008 ; Breg= address of elements 
00000008 ; SP+0= number of elements sort
00000008 ; int* sort(int* in,int count)
00000008 ;{
00000008 ;	int x;
00000008 ;	int y;
00000008 ;	int temp;
00000008 ;	for(x=0;x < count-1;x++)
00000008 ;	{
00000008 ;		for(y=1;y<count-x;y++)
00000008 ;		{
00000008 ;			if(((in+y))>((in+y-1)))
00000008 ;			{
00000008 ;				temp=(*(in+y-1));
00000008 ;				((in+y-1))=((in+y));
00000008 ;				(*(in+y))=temp;
00000008 ;			}
00000008 ;		}
00000008 ;	}
00000008 ;	exit:return;
00000008 ;} 
00000008 ffffff0a sort: adj -1 
00000009 00000003 stl 0 
0000000a ;save return address
0000000a 00000203 stl 2 
0000000b ;save address of elements
0000000b fffffd0a adj -3 
0000000c 00000000 ldc 0 
0000000d 00000003 stl 0 
0000000e ;save temp
0000000e 00000100 ldc 1 
0000000f 00000103 stl 1 
00000010 ;save y
00000010 00000000 ldc 0 
00000011 00000203 stl 2 
00000012 ;save x
00000012 00000402 loop_out: ldl 4 
00000013 ;load count
00000013 00000202 ldl 2 
00000014 ;load x
00000014 00000007 sub 
00000015 ;count - x
00000015 00000100 ldc 1 
00000016 00000007 sub 
00000017 ;count-1-x
00000017 0000260f brz done 
00000018 00000100 ldc 1 
00000019 00000103 stl 1 
0000001a ;y = 1
0000001a 00000402 loop_in: ldl 4 
0000001b ;load count
0000001b 00000202 ldl 2 
0000001c ;load x
0000001c 00000007 sub 
0000001d ;count - x
0000001d 00000102 ldl 1 
0000001e ;load y 
0000001e 00000007 sub  
0000001f ;count - x -y
0000001f 0000160f brz addx 
00000020 00000502 ldl 5 
00000021 ;load address of elements
00000021 00000004 ldnl 0 
00000022 ;array[0]
00000022 00000000 ldc 0 
00000023 ;save array[0] to Breg
00000023 00000104 ldnl 1 
00000024 ;array[1]
00000024 00000007 sub 
00000025 ;array[0]-array[1]
00000025 00000110 brlz swap 
00000026 00000a11 br addy 
00000027 00000502 swap: ldl 5 
00000028 ;load address of elements
00000028 00000004 ldnl 0 
00000029 ;array[0]
00000029 00000003 stl 0 
0000002a ;temp = array[0]
0000002a 00000502 ldl 5 
0000002b 00000104 ldnl 1 
0000002c ;array[1]
0000002c 00000502 ldl 5 
0000002d 00000005 stnl 0 
0000002e ;array[0] = array[1]
0000002e 00000002 ldl 0 
0000002f ;load temp
0000002f 00000502 ldl 5 
00000030 00000105 stnl 1 
00000031 ;array[1] = temp
00000031 ;increment
00000031 00000100 addy: ldc 1 
00000032 00000102 ldl 1 
00000033 ;load y
00000033 00000006 add 
00000034 ;y++
00000034 00000103 stl 1 
00000035 ;save y++
00000035 ffffe411 br loop_in 
00000036 00000100 addx: ldc 1 
00000037 00000202 ldl 2 
00000038 ;load x 
00000038 00000006 add 
00000039 ;x++
00000039 00000203 stl 2 
0000003a 00000100 ldc 1 
0000003b 00000502 ldl 5 
0000003c 00000006 add 
0000003d ;array++
0000003d ffffd411 br loop_out 
0000003e 00000302 done: ldl 3 
0000003f ;load return address
0000003f 0000050a adj 5 
00000040 ;sp = array
00000040 0000000e return 
00000041 ;ok, 
00000041 00000002 array: data 2 
00000042 00000001 data 1 
00000043 00000003 data 3 
00000044 00000004 data 4 
00000045 00000005 data 5 
00000046 00000006 data 6 
00000047 00000007 data 7 
00000048 00000008 data 8 
00000049 00000009 data 9 
0000004a 0000000a data 10 
0000004b 
0000004b ;output 1 2 3 4 5 6 7 8 9 10
